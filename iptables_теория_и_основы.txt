    iptables       теория и основы


кратко, из прошлой статьи:
  заблокировать IP-адрес 192.168.10.5 только на порту 100:
    iptables -A INPUT -s 192.168.10.5 -p tcp --dport 100 -j DROP

  ПОЛНОСТЬЮ ЗАБЛОКИРУЕТ IP-адрес 192.168.10.5:
    iptables -A INPUT -s 192.168.10.5 -j DROP

  Другой вариант маски будет выглядеть так:
    iptables -t filter -A INPUT -s 8.0.0.0/255.128.0.0 -j DROP

  В таком случае, ЧТОБЫ РАЗБЛОКИРОВАТЬ IP 
    iptables -I INPUT -s 8.8.8.8/32 -j ACCEPT

  разрешим порт 22
    iptables -I INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT

  ОТОБРАЖЕНИЕ ПРАВИЛ
    iptables -L


                        ТЕОРИЯ:
iptables linuxКонсольная утилита iptables представляет собой стандартный интерфейс для управления межсетевым экраном (брандмауэром) 
netfilter в Linux, начиная с ядра версии 2.4. Возможности iptables весьма обширны, а потому этой утилите будет посвящена целая серия статей.
Первоначально разработка iptables и netfilter шла совместно, это объясняет широкие возможности iptables по управлению межсетевым экраном. 
Идеология iptables строится на наборе правил, каждое из которых содержит условие и действие, которое применяется к пакетам, подпадающим под 
это условие. Независимые списки правил объединяются в цепочки, а независимые группы цепочек в таблицы.



Схема прохождения пакетом таблиц iptables.
Синтаксис iptables
В общем виде синтаксис iptables выглядит так:
iptables [таблица] [команда] [цепочка] [критерии] [действие]

Надо отметить, что iptables позволяет генерировать великое множество правил для прохождения сетевых пакетов. Для лучшего понимания синтаксиса 
iptables рассмотрим элементы этих правил.

Цепочки iptables
Существует пять видов цепочек:

PREROUTING — предназначена для первичной обработки входящих пакетов, адресованных как непосредственно данному узлу, так и другим узлам сети. 
В этой таблице оказывается абсолютно весь входящий трафик для дальнейшего анализа;

INPUT — таблица для входящих пакетов, отправленных непосредственно этому узлу;

FORWARD — таблица для пакетов, не адресованных этому узлу. Они будут переданы следующему узлу, если текущий узел выполняет роль маршрутизатора;

OUTPUT — применяется для пакетов, отправленных с этого узла;

POSTROUTING — в этой таблице оказываются пакеты, предназначенные для передачи на другие узлы сети.

Имеется возможность создавать свои цепочки, но обычно в этом нет необходимости. Названия цепочек записывают заглавными буквами.

Таблицы iptables
А вот названия таблиц пишут строчными буквами. Во избежание путаницы. Рассмотрим основные таблицы:

raw — содержит цепочки PREROUTING и OUTPUT. В этой таблице производятся манипуляции с пакетами до задействования механизма определения состояний;

mangle — данная таблица предназначена для модификации заголовков сетевых пакетов, таких параметров 
как ToS (Type of Service), TTL (Time To Live), MARK. Содержит все существующие пять цепочек;

nat — эта таблица используется для трансляции сетевых адресов, т.е. подмены адреса получателя/отправителя. Применяется, если узел 
используется в качестве маршрутизатора. Содержит цепочки PREROUTING, OUTPUT, POSTROUTING;

filter — используется для фильтрации пакетов. Именно в этой таблице происходит принятие решений о разрешении или запрете дальнейшего 
движения пакета в системе. Используется по умолчанию, если явно не указано имя другой таблицы. Содержит цепочки INPUT, FORWARD и OUTPUT.


Действия iptables:
Как уже было сказано, каждое правило в сетевом экране обязательно содержит действие, которое должно быть применено к пакету. Вот самые 
распространённые из действий:

ACCEPT — разрешение на дальнейшее прохождение пакета;

DROP — выбросить пакет без уведомления отправителя;

REJECT — отказ в прохождении пакета с уведомлением отправителя. Данный способ может привести к дополнительным затратам вычислительных 
ресурсов узла, поэтому обычно рекомендуется использовать DROP;

LOG — фиксация информации о пакете в файле системного журнала;

MARK — пометка определённых пакетов. Данная метка перестанет существовать, как только пакет покинет межсетевой экран. Обычно 
применяется при маршрутизации;

CONNMARK — аналогично MARK, но для соединений;

QUEUE — отправка пакета в очередь приложению для дальнейшего взаимодействия;

RETURN — прекращение движения пакета по текущей цепочке и возврат в предыдущую цепочку. Если текущая цепочка единственная, тогда к пакету 
будет применено действие по умолчанию;

REDIRECT — перенаправление пакета на указанный в пределах этого же узла порт. Применяется для реализации «прозрачного» прокси;

DNAT — подмена адреса получателя в заголовке IP-пакета. В основном применяется для предоставления доступа к ресурсам, находящимся внутри сети, снаружи;

SNAT — подмена адреса отправителя в заголовке IP-пакета. Обычно применяется для предоставления доступа к внешним ресурсам (Интернет) 
при нехватке IP-адресов, выданных провайдером;

MASQUERADE — аналогично SNAT. Отличие в том, что может использоваться в ситуациях, когда провайдер предоставляет 
динамический IP-адрес (SNAT требует статический IP). Более затратный способ с точки зрения потребляемых вычислительных ресурсов устройства;

TOS — управление битами в одноимённом поле заголовка IP-пакета;

ULOG — более продвинутый вариант записи информации. Позволяет писать как в обычный текстовый файл, так и в базу данных;

TTL — изменение значения в одноимённом заголовке IP-пакета, установка времени жизни пакета.

Команды iptables:
Команды iptables можно определить как своеобразные инструкции к действию. С их помощью можно добавлять, удалять или сбрасывать правила, 
задавать действия по умолчанию и т.д. Команды имеют две формы записи — полную и краткую. Использовать можно любую. В перечне 
ниже формы записи приведены через косую черту.

—append / -A — добавление правила в конец указанной цепочки;

—check / -C — проверка существующих в указанной цепочке правил;

—delete / -D — удаление правила с указанным номером в заданной цепочке;

—insert / -I — вставить правило с указанным номером. Если номер не указан, правило будет добавлено первым;

—replace / -R — замена правила с указанным номером;

—list / -L — вывод списка всех действующих правил со всех цепочек. Если указать конкретную цепочку, будут выведены правила только по ней;

—list-rules / -S — построчный вывод всех правил во всех цепочках. Если указать конкретную цепочку, будут выведены правила только по ней;

—flush / -F — удаление всех правил. Если указать конкретную цепочку, правила будут удалены только в ней;

—zero / -Z — обнуление всех счётчиков во всех цепочках. Если указать конкретную цепочку, обнуление произойдёт только в ней;

—new / -N — создание пользовательской цепочки;

—delete-chain / -X — удаление пользовательской цепочки;

—policy / -P — установка политики по умолчанию для цепочки. Обычно это ACCEPT или DROP. Данная политика будет применена к пакетам, не 
попавшим ни под один из критериев;

—rename-chain / -E — переименование цепочки. Сначала указывается текущее имя цепочки, через пробел новое имя;

—help / -h — вывод справки по синтаксису iptables.

Критерии iptables:
Напоследок рассмотрим критерии iptables. Это те условия, при соблюдении которых к пакетам применяются действия. Обратите внимание, что правило 
может содержать не только один критерий, но и несколько. Критерии тоже имеют полную и краткую форму записи. А некоторые из них поддерживают 
логическое НЕ. Инверсия достигается подстановкой знака «!» перед критерием.

—protocol / -p — указание протокола (TCP, UDP и другие). Поддерживается инверсия;

—source / -s — указание адреса источника пакета. Можно указать как один IP-адрес, так и диапазон адресов. Поддерживается инверсия;

—destination / -d — указание адреса получателя пакета. Можно указать как один IP-адрес, так и диапазон адресов. Поддерживается инверсия;

—match / -m — подключение указанного модуля;

—jump / -j — выполнение указанного действия, если правило подошло;

—goto / -g — переход к указанной цепочке правил;

—in-interface / -i — задаёт входящий сетевой интерфейс. Поддерживается инверсия;

—out-interface / -o — задаёт исходящий сетевой интерфейс. Поддерживается инверсия;

—fragment / -f — указывает на фрагменты у фрагментированных пакетов. Поддерживается инверсия;

—set-counters / -c — установка начальных значений счётчиков пакетов и байтов;

—destination-port / —dport — порт получателя пакета. Поддерживается инверсия;

—source-port / —sport — порт отправителя пакета. Поддерживается инверсия.

Примеры:
Заблокировать компьютер с адресом 170.10.10.5:
iptables -A INPUT -s 170.10.10.5 -j DROP

Разрешить входящие ICMP-пакеты:
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT



                     КАК РАЗРЕШИТЬ ИЛИ ЗАБЛОКИРОВАТЬ IP-адрес в iptables

   БЛОКИРУЕМ    IP-адреса через iptables
Представим, что нам необходимо заблокировать компьютер (или другое устройство) с IP-адресом 192.168.3.7. В этом 
случае нам надо выполнить следующую команду:
iptables -A INPUT -s 192.168.3.7 -j DROP

Блокируем всю подсеть 192.168.3.0/24:
iptables -A INPUT -s 192.168.3.0/24 -j DROP

Заблокировать все IP-адреса, кроме 192.168.3.4:
iptables -A INPUT -s 192.168.3.4 -j ACCEPT
iptables -P INPUT DROP

Примеры выше касались входящего трафика. Для исходящего и транзитного трафиков всё аналогично.

Блокируем исходящий трафик узла с IP-адресом 192.168.3.7:
iptables -A OUTPUT -s 192.168.3.7 -j DROP

Блокируем транзитный трафик для всех, кроме 192.168.3.3:
iptables -A FORWARD -s 192.168.3.3 -j ACCEPT
iptables -P FORWARD DROP


    РАЗРЕШАЕМ IP-адреса через iptables
Разрешаем входящий трафик с устройства с IP-адресом 192.168.3.5:
iptables -A INPUT -s 192.168.3.5 -j ACCEPT

Разрешаем всю подсеть 192.168.3.0/24:
iptables -A INPUT -s 192.168.3.0/24 -j ACCEPT

Разрешаем весь входящий трафик, кроме трафика с узла с IP-адресом 192.168.3.2:
iptables -A INPUT -s 192.168.3.2 -j DROP
iptables -P INPUT ACCEPT

Аналогично и для исходящего и транзитного трафиков.

Разрешаем исходящий трафик узла с IP-адресом 192.168.3.7:

iptables -A OUTPUT -s 192.168.3.7 -j ACCEPT

Разрешаем транзитный трафик для всех, кроме 192.168.3.9:
iptables -A FORWARD -s 192.168.3.9 -j DROP
iptables -P FORWARD ACCEPT




                      ОТКРЫТЬ ИЛИ ЗАКРЫТЬ ПОРТ в iptables

ЗАКРЫТЬ:
Закрыть порт через iptables
Допустим, что по умолчанию у нас открыты все порты, но некоторые всё таки понадобилось закрыть. К примеру, мы не 
хотим, чтобы на FTP-сервер можно было попасть по порту 21:
iptables -A INPUT -p tcp --dport 21 -j DROP

Допустим, мы подключаемся к серверу через SSH с определённого адреса, с других адресов доступа быть не должно.
iptables -A INPUT -p tcp ! -s 192.168.105.31 --dport 22 -j DROP

В строке выше указан доверенный IP-адрес, который взят лишь для примера. Символ «!» перед ключом -s используется для инверсии, 
таким образом показывается, что кроме этого адреса доступ никто не получит.


ОТКРЫТЬ:
Открыть порт через iptables
Теперь представим обратную ситуацию — по умолчанию все порты закрыты. Допустим, у нас есть веб-сервер. Мы хотим открыть доступ 
по порту 80 для обеспечения работы протокола HTTP. Не помешает открыть и порт 443 — для поддержки протокола HTTPS 
совместно с SSL. Ну и порт 22 тоже можно открыть для доступа по SSH.

iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT

Как видите, мы написали три правила. Для каждого порта своё. Такая форма записи не является ошибочной, но можно свести всё в одну строку:
iptables -A INPUT -p tcp -m multiport --dports 22,80,443 -j ACCEPT

Если используете расширение multiport, учтите необходимость всегда использовать критерий -p tcp или -p udp. Так можно одной строкой 
указать до 15 разных портов через запятую. Обратите внимание, что в примере с построчной записью мы использовали критерий —dport. Он используется 
для указания одного порта. В примере с однострочной записью указан критерий —dports. Он используется для указания нескольких портов.




            Как ЗАПРЕТИТЬ PING через iptables

Цифра 8 означает, что речь идёт об эхо-запросе. Список возможных типов можно посмотреть командой iptables -p icmp -h

ограничить ICMP-пакеты:
iptables -A INPUT -p icmp --icmp-type 8 -j DROP

Разрешить ping хоста тоже очень просто. Команда будет выглядеть так:
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT





            ОГРАНИЧЕНИЕ ДОСТУПА ПО ВРЕМЕНИ через iptables

Бывает, что доступ к сетевым ресурсам нужно ограничить по определённому расписанию. 
В iptables существует модуль time, который позволяет выполнить данный вид ограничений.

Допустим, нам нужно, чтобы доступ к FTP-серверу был ограничен в субботу и воскресенье с 15:00 до 21:00:
iptables -I INPUT -p tcp --dport 21 -m time --kerneltz --timestart 15:00 --timestop 21:00 --weekdays Sat,Sun --syn -j DROP

Разберём эту команду подробнее:
—kerneltz — использование времени текущей временной зоны, в противном случае iptables будет работать по времени часового пояса UTC;

—timestart — время начала срабатывания условия. Допустимый диапазон указания времени с 00:00:00 до 23:59:59. Вместо формата ЧЧ:ММ:СС можно 
использовать формат ЧЧ:ММ. Именно так и сделано в примере;

—timestop — время окончания действия условия. Формат ввода аналогичен тому, что был описан у —timestart;

—weekdays — день или дни недели, когда будет срабатывать условие. Допустимые значения: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Можно использовать 
порядковые номера дней недели от 1 до 7. Дополнительно поддерживается формат в два символа: Mo, Tu, We и т.д. Если необходимо указать 
несколько дней, они перечисляются через запятую без пробела;

—monthdays — день месяца, в который будет срабатывать условие. Допустимы значения от 1 до 31.

Например, мы хотим ограничивать доступ к FTP-серверу не по дням недели, а по вторым числам каждого месяца:
iptables -I INPUT -p tcp --dport 21 -m time --kerneltz --timestart 15:00 --timestop 21:00 --monthdays 2 --syn -j DROP




            ЗАПИСЬ СОБЫТИЙ В ЛОГ в iptables
мы можем включить запись определённых событий в системный журнал (syslog). Это очень удобно, если Вы хотите посмотреть, что происходит с сетевыми соединениями.

В одной из предыдущих статей мы запрещали доступ к FTP-серверу по порту 21. Команда выглядела так:
iptables -A INPUT -p tcp --dport 21 -j DROP

Допустим, что мы хотим, чтобы в системном журнале отражалась информация о попытках подключения по этому порту. Тогда перед этой строкой надо добавить следующую строку:
iptables -A INPUT -p tcp --dport 21 -j LOG --log-level INFO --log-prefix "New connection from ours: "

В итоге всё вместе должно выглядеть так:
iptables -A INPUT -p tcp --dport 21 -j LOG --log-level INFO --log-prefix "New connection from ours: "
iptables -A INPUT -p tcp --dport 21 -j DROP

Теперь, если мы обратимся к файлу /var/log/syslog, то мы увидим там сообщение вида
Apr 17 15:11:37 hostname kernel: New connection from ours: IN=eth0 OUT= MAC=xx:yy:zz:xx:yy:zz:xx:yy:zz:xx:yy:zz:xx:yy SRC=XXX.XXX.XXX.XXX 
DST=XXX.XXX.XXX.XXX LEN=48 TOS=0x00 PREC=0x00 TTL=110 ID=38914 DF PROTO=TCP SPT=31521 DPT=21 WINDOW=65535 RES=0x00 SYN URGP=0

В этом сообщении содержится достаточно много информации: дата и время события, имя хоста, источник сообщения (для сообщений от межсетевого экрана это всегда ядро), 
заданный в команде префикс (New connection from ours), входящий и исходящий интерфейсы, сцепленные вместе MAC-адреса назначения и источника, IP-адреса источника 
и получателя, длина пакета и его время жизни, протокол и порты источника и назначения, наличие флага SYN и так далее.

Параметр —log-level определяет важность сообщения, а параметр —log-prefix позволяет задать поясняющее сообщение. Есть и другие полезные параметры. 
Можно дополнить эту информацию номером TCP-последовательности (—log-tcp-sequence), выводом включенных опций 
протоколов TCP (—log-tcp-options) и IP (—log-ip-options), а также идентификатором пользователя, процесс которого отправил 
данный пакет (—log-uid) Последнее имеет смысл только в цепочках OUTPUT и POSTROUTING.


