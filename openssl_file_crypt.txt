Шифрование файла openssl

Для шифрования буду использовать openssl, шифрование можно включить в скрипт копирования и выполнять  после или до 
сжатия, можно шифровать на лету или же отдельным скриптом. Если шифровать не на лету, то после получения шифрованного 
файла, файл оригинальный — удалить, в этом случае в промежуток времени между окончанием шифрования и удалением 
файла — файл (не шифрованый), особенно маленький, можно скопировать, что ставит под вопрос целесообразность шифрования.

Шифровать можно по сертификату и с помощью задания пароля, я буду задавать пароль, не безопасно, в скрипте в открытом виде. 
Чтобы узнать пароль, нужно найти скрипт, не думаю, что это получится быстро, а сами шифрованные файлы, если бы я применял шифрование, 
хранились бы на отдельном разделе и даже на отдельном физическом диске. Openssl шифрует файл, а не директории, поэтому перед 
шифрованием поместим директорию в контейнер tar

tar -cvf — direcroty_for_crypt/ | openssl aes-256-cbc -salt -k Parol123  -out выходной_файл
где:
tar — упаковывает в контейнер, не сжимает файлы
-cvf ключ для упаковки
— direcroty_for_crypt/ директория для упаковки в контейнер и послед шифрования — перед директорией дефис с пробелом обязательно, заканчивает имя директории сшлэш 

openssl — коммада для шифрования
aes-256-cbc — алгоритм шифрования 
-salt добавление соли, чтобы труднее расшифровать (брутфорс)
 -k Parol123 — задаем пароль Parol123
-out выходной_файл — файл который будет зашифрован

выглядит так:
tar -cvf - direcroty_for_crypt/ | openssl aes-256-cbc -salt -k Parol123 -out crypt_file.tar.aes

- crypt_file.tar.aes просто выходной шифрованный файл, где я показываю каким алгоритмом зашифровал и чем упаковал, можно этого не делать, главное не забыть

теперь в случае необходимости нужно файл расшифровать и изъять из контейнера. Делать будем в две команды
(почему тут aes-256-aba — aba я не знаю, может ошибка, шифровали то мы aes-256-cbc)
openssl aes-256-aba -d -salt -k Parol123  -in crypt_file.tar.aes — out decrypt_file.tar.aes.out
и
tar -xvf decrypt_file.tar.aes.out

где
decrypt_file.tar.aes.out — рассшифрованный tar архив 

после чего получим ту директорию которую сжимали и шифровали со всем ее содержимым в читаемом виде

шифруем отдельный файл ZIP  в UBUNTU 20,04 пример:
(выбирать cbc – в нем меньше ошибок (отказов))
openssl aes-256-cbc -salt -k Parol123 -in doc.zip -out doc.crypt
openssl aes-256-cbc — запуск шифрования с выбранным алгоритмом
-salt -добавляем соли для лучшего шифрования
-k Parol123 -устанавливаем пароль (в скрипте, в открытом виде — не безопасно)
-in doc.zip -какой файл будем шифровать
-out doc.crypt — шифрованый файл на выходе

файл оригинал останется, поэтому его нужно удалить
rm -f doc.zip  - удаляем оригинал, шифрованый не трогаем

расшифровка файла в ручную (ввести пароль по запросу)
openssl aes-256-cbc -d -in audit_2018.crypt -out audit_2018.zip
пароль указывается сразу
openssl aes-256-cbc -d -k Parol123 -in doc.crypt -out doc.zip

или же архивируем с паролем
zip -P Passw123 audit.zip audit_2018.crypt
zip — команда на архивирование
-P Passw123 задаем пароль, P большая
audit.zip -как будет называться запароленный архив (выходной файл)
audit_2018.crypt — файл который архивируем
