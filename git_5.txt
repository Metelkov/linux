спасибо за помощь AntonShadrinNN


Создание Локального Репозитория
Следующая команда создаст репозиторий с веткой main:
git init --initial-branch=<branch-name>


При просмотре вывода git branch можно увидеть, что несмотря на создание базовой бранчи, список веток пуст. 
Чтобы main сохранилась и была видна после вывода git branch, нужно сделать пустой коммит (внизу).



Создание Веток
Чтобы минимизировать количество merge-конфликтов при объединении изменений с основной веткой, нужно сначала 
перейти на основную ветку (main/master), получить все новые изменения и после этого создать свою ветку.
git checkout main
git pull
git checkout -b <your_branch_name>


Удаление Веток
Если появилась потребность удалить созданную ветку, то можно воспользоваться командой git branch -D.
При удалении нельзя находится на удаляемой ветке

git checkout <another_existing_branch>    --переходим на другую ветку
git branch -D <branch_to_delete>


Удаление веток происходит локально, не затрагивая удалённый репозиторий



Посмотреть Ветки
Чтобы посмотртреть существующие ветки и удостовериться какая сейчас активна можно запустить git branch 
без параметов. Ветка, выделенная зелёным цветом с префиксом * - та ветка, на которой вы находитесь сейчас.

git branch


Создание Коммита
Обычно удобно сделать git add . для добавления всех изменений в staging area. Иногда это вызывает добавление 
лишних файлов, поэтому можно явно перечислять файлы, которые нужно добавить.

git add .
git commit -m "Commit message"



Случайно Добавил Файл в Staging Area
Если всё же после git add лишние файлы начали отслеживаться гитом, то их можно удалить.

git restore --staged <file_name>



Случайно Закоммитил Лишний Файл
Если лишний файл был замечен уже после того, как создался коммит, то можно удалить его, сделав ещё один коммит, 
но не удаляя его локально. То есть гит будет считать, что этот файл никогда не был в коммите, 
но файл останется в рабочей директории.

git rm --cached <file_name>
git commit -m "Commit message"


Ошибся в Комментарии Коммита
Если ошибся в комментарии коммита, то можно просто запустить

git commit --amend -m "New commit message"



История Коммитов
Чтобы посмотреть историю коммитов на текущей ветке, получить их hash, можно запустить git log.

git log



Rebase vs Merge
Rebase перетирает историю, в то время как merge создаёт дополнительный merge-коммит, 
сохраняя всю историю, что может быть как плюсом, так и минусом.



Конфликты
При операции rebase или merge могут возникнуть конфликты, которые гит не может разрешить автоматически. Чаще всего это 
происходит, когда вы с кем-то работаете над одним и тем же файлом на разных ветках, которые после мёржатся в основную ветку.

При попытке сделать rebase, получаем такое сообщение:

hint: Resolve all conflicts manually, mark them as resolved with
hint: "git add/rm <conflicted_files>", then run "git rebase --continue".
hint: You can instead skip this commit: run "git rebase --skip".
hint: To abort and get back to the state before "git rebase", run "git rebase --abort".

Необходимо пройтись по всем файлам, указанным как конфликтным и разрешить все конфликты.

git rebase <rebase_branch>
# Разрешить все конфликты
git add .
git rebase --continue
Cherry-pick


Иногда нужно перенести коммит с одной ветки на другую, например когда случайно сделал коммит, находясь на основной ветке.

Посмотреть hash коммита, который нужно перенести:

git log



Сделать cherry-pick

git checkout <target_branch>
git cherry-pick <commit-hash>

Если Нужно Откатить Ветку до Ранних Коммитов
Иногда случайно сделанный коммит нужно отменить, для этого можно сделать git reset:

git reset --hard HEAD~1
HEAD~1 говорит откатиться на один коммит назад, допустимо указывать большее количество коммитов.


git checkout <file_name>
вернуть состояние отдельного файла обратно


удалить папку из гита
git rm -r myfolder
git commit -m "myfolder is deleted"


git конфликты:
fetch first

делаем
git pull
git push

возможно после получим:
non-fast-forward

делаем
git pull --rebase
git push

идея плохая, но модет сработает (не проверял)
git push origin master --force


Как Сделать Пустой Коммит (Затриггерить Билды)
Чтобы сделать пустой коммит нужно добавить флаг --allow-empty к git commit:

git commit --allow-empty -m "Commit message"
